//
// ClientProjectAPI.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

open class ClientProjectAPI {

    /**

     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - parameter organizationBody: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createOrganization(projectId: String, organizationBody: OrganizationBody? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Organization?, _ error: Error?) -> Void)) -> RequestTask {
        return createOrganizationWithRequestBuilder(projectId: projectId, organizationBody: organizationBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - POST /projects/{project_id}/organizations
     - Create a B2B SSO Organization
     - Bearer Token:
       - type: http
       - name: oryAccessToken
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - parameter organizationBody: (body)  (optional)
     - returns: RequestBuilder<Organization> 
     */
    open class func createOrganizationWithRequestBuilder(projectId: String, organizationBody: OrganizationBody? = nil) -> RequestBuilder<Organization> {
        var localVariablePath = "/projects/{project_id}/organizations"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: organizationBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Organization>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create a Project
     
     - parameter createProjectBody: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createProject(createProjectBody: CreateProjectBody? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Project?, _ error: Error?) -> Void)) -> RequestTask {
        return createProjectWithRequestBuilder(createProjectBody: createProjectBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create a Project
     - POST /projects
     - Creates a new project.
     - Bearer Token:
       - type: http
       - name: oryAccessToken
     - parameter createProjectBody: (body)  (optional)
     - returns: RequestBuilder<Project> 
     */
    open class func createProjectWithRequestBuilder(createProjectBody: CreateProjectBody? = nil) -> RequestBuilder<Project> {
        let localVariablePath = "/projects"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createProjectBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Project>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Create project API token
     
     - parameter project: (path) The Project ID or Project slug 
     - parameter createProjectApiKeyRequest: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func createProjectApiKey(project: String, createProjectApiKeyRequest: CreateProjectApiKeyRequest? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ProjectApiKey?, _ error: Error?) -> Void)) -> RequestTask {
        return createProjectApiKeyWithRequestBuilder(project: project, createProjectApiKeyRequest: createProjectApiKeyRequest).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Create project API token
     - POST /projects/{project}/tokens
     - Create an API token for a project.
     - Bearer Token:
       - type: http
       - name: oryAccessToken
     - parameter project: (path) The Project ID or Project slug 
     - parameter createProjectApiKeyRequest: (body)  (optional)
     - returns: RequestBuilder<ProjectApiKey> 
     */
    open class func createProjectApiKeyWithRequestBuilder(project: String, createProjectApiKeyRequest: CreateProjectApiKeyRequest? = nil) -> RequestBuilder<ProjectApiKey> {
        var localVariablePath = "/projects/{project}/tokens"
        let projectPreEscape = "\(APIHelper.mapValueToPathItem(project))"
        let projectPostEscape = projectPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project}", with: projectPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: createProjectApiKeyRequest)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ProjectApiKey>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "POST", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete a B2B SSO Organization for a project.
     
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - parameter organizationId: (path) Organization ID  The Organization&#39;s ID. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteOrganization(projectId: String, organizationId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteOrganizationWithRequestBuilder(projectId: projectId, organizationId: organizationId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete a B2B SSO Organization for a project.
     - DELETE /projects/{project_id}/organizations/{organization_id}
     - Bearer Token:
       - type: http
       - name: oryAccessToken
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - parameter organizationId: (path) Organization ID  The Organization&#39;s ID. 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteOrganizationWithRequestBuilder(projectId: String, organizationId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/projects/{project_id}/organizations/{organization_id}"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organization_id}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Delete project API token
     
     - parameter project: (path) The Project ID or Project slug 
     - parameter tokenId: (path) The Token ID 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func deleteProjectApiKey(project: String, tokenId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return deleteProjectApiKeyWithRequestBuilder(project: project, tokenId: tokenId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Delete project API token
     - DELETE /projects/{project}/tokens/{token_id}
     - Deletes an API token and immediately removes it.
     - Bearer Token:
       - type: http
       - name: oryAccessToken
     - parameter project: (path) The Project ID or Project slug 
     - parameter tokenId: (path) The Token ID 
     - returns: RequestBuilder<Void> 
     */
    open class func deleteProjectApiKeyWithRequestBuilder(project: String, tokenId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/projects/{project}/tokens/{token_id}"
        let projectPreEscape = "\(APIHelper.mapValueToPathItem(project))"
        let projectPostEscape = projectPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project}", with: projectPostEscape, options: .literal, range: nil)
        let tokenIdPreEscape = "\(APIHelper.mapValueToPathItem(tokenId))"
        let tokenIdPostEscape = tokenIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{token_id}", with: tokenIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Returns the Ory Network Project selected in the Ory Network Console
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getActiveProjectInConsole(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ActiveProjectInConsole?, _ error: Error?) -> Void)) -> RequestTask {
        return getActiveProjectInConsoleWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Returns the Ory Network Project selected in the Ory Network Console
     - GET /console/active/project
     - Use this API to get your active project in the Ory Network Console UI.
     - Bearer Token:
       - type: http
       - name: oryAccessToken
     - returns: RequestBuilder<ActiveProjectInConsole> 
     */
    open class func getActiveProjectInConsoleWithRequestBuilder() -> RequestBuilder<ActiveProjectInConsole> {
        let localVariablePath = "/console/active/project"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ActiveProjectInConsole>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Returns a B2B SSO Organization for a project by it's ID.
     
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - parameter organizationId: (path) Organization ID  The Organization&#39;s ID. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getOrganization(projectId: String, organizationId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetOrganizationResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getOrganizationWithRequestBuilder(projectId: projectId, organizationId: organizationId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Returns a B2B SSO Organization for a project by it's ID.
     - GET /projects/{project_id}/organizations/{organization_id}
     - Bearer Token:
       - type: http
       - name: oryAccessToken
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - parameter organizationId: (path) Organization ID  The Organization&#39;s ID. 
     - returns: RequestBuilder<GetOrganizationResponse> 
     */
    open class func getOrganizationWithRequestBuilder(projectId: String, organizationId: String) -> RequestBuilder<GetOrganizationResponse> {
        var localVariablePath = "/projects/{project_id}/organizations/{organization_id}"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organization_id}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetOrganizationResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get a Project
     
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getProject(projectId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Project?, _ error: Error?) -> Void)) -> RequestTask {
        return getProjectWithRequestBuilder(projectId: projectId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get a Project
     - GET /projects/{project_id}
     - Get a projects you have access to by its ID.
     - Bearer Token:
       - type: http
       - name: oryAccessToken
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - returns: RequestBuilder<Project> 
     */
    open class func getProjectWithRequestBuilder(projectId: String) -> RequestBuilder<Project> {
        var localVariablePath = "/projects/{project_id}"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Project>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Get all members associated with this project
     
     - parameter project: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getProjectMembers(project: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [CloudAccount]?, _ error: Error?) -> Void)) -> RequestTask {
        return getProjectMembersWithRequestBuilder(project: project).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Get all members associated with this project
     - GET /projects/{project}/members
     - This endpoint requires the user to be a member of the project with the role `OWNER` or `DEVELOPER`.
     - Bearer Token:
       - type: http
       - name: oryAccessToken
     - parameter project: (path)  
     - returns: RequestBuilder<[CloudAccount]> 
     */
    open class func getProjectMembersWithRequestBuilder(project: String) -> RequestBuilder<[CloudAccount]> {
        var localVariablePath = "/projects/{project}/members"
        let projectPreEscape = "\(APIHelper.mapValueToPathItem(project))"
        let projectPostEscape = projectPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project}", with: projectPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[CloudAccount]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter projectId: (path) Project ID 
     - parameter eventType: (query) The event type to query for 
     - parameter resolution: (query) The resolution of the buckets  The minimum resolution is 1 hour. 
     - parameter from: (query) The start RFC3339 date of the time window 
     - parameter to: (query) The end RFC3339 date of the time window 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func getProjectMetrics(projectId: String, eventType: String, resolution: String, from: Date, to: Date, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: GetProjectMetricsResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return getProjectMetricsWithRequestBuilder(projectId: projectId, eventType: eventType, resolution: resolution, from: from, to: to).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /projects/{project_id}/metrics
     - Retrieves project metrics for the specified event type and time range
     - Bearer Token:
       - type: http
       - name: oryAccessToken
     - parameter projectId: (path) Project ID 
     - parameter eventType: (query) The event type to query for 
     - parameter resolution: (query) The resolution of the buckets  The minimum resolution is 1 hour. 
     - parameter from: (query) The start RFC3339 date of the time window 
     - parameter to: (query) The end RFC3339 date of the time window 
     - returns: RequestBuilder<GetProjectMetricsResponse> 
     */
    open class func getProjectMetricsWithRequestBuilder(projectId: String, eventType: String, resolution: String, from: Date, to: Date) -> RequestBuilder<GetProjectMetricsResponse> {
        var localVariablePath = "/projects/{project_id}/metrics"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        var localVariableUrlComponents = URLComponents(string: localVariableURLString)
        localVariableUrlComponents?.queryItems = APIHelper.mapValuesToQueryItems([
            "event_type": (wrappedValue: eventType.encodeToJSON(), isExplode: true),
            "resolution": (wrappedValue: resolution.encodeToJSON(), isExplode: true),
            "from": (wrappedValue: from.encodeToJSON(), isExplode: true),
            "to": (wrappedValue: to.encodeToJSON(), isExplode: true),
        ])

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<GetProjectMetricsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**

     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listOrganizations(projectId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: ListOrganizationsResponse?, _ error: Error?) -> Void)) -> RequestTask {
        return listOrganizationsWithRequestBuilder(projectId: projectId).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     - GET /projects/{project_id}/organizations
     - Bearer Token:
       - type: http
       - name: oryAccessToken
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - returns: RequestBuilder<ListOrganizationsResponse> 
     */
    open class func listOrganizationsWithRequestBuilder(projectId: String) -> RequestBuilder<ListOrganizationsResponse> {
        var localVariablePath = "/projects/{project_id}/organizations"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<ListOrganizationsResponse>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List a project's API Tokens
     
     - parameter project: (path) The Project ID or Project slug 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listProjectApiKeys(project: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ProjectApiKey]?, _ error: Error?) -> Void)) -> RequestTask {
        return listProjectApiKeysWithRequestBuilder(project: project).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List a project's API Tokens
     - GET /projects/{project}/tokens
     - A list of all the project's API tokens.
     - Bearer Token:
       - type: http
       - name: oryAccessToken
     - parameter project: (path) The Project ID or Project slug 
     - returns: RequestBuilder<[ProjectApiKey]> 
     */
    open class func listProjectApiKeysWithRequestBuilder(project: String) -> RequestBuilder<[ProjectApiKey]> {
        var localVariablePath = "/projects/{project}/tokens"
        let projectPreEscape = "\(APIHelper.mapValueToPathItem(project))"
        let projectPostEscape = projectPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project}", with: projectPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ProjectApiKey]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     List All Projects
     
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func listProjects(apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: [ProjectMetadata]?, _ error: Error?) -> Void)) -> RequestTask {
        return listProjectsWithRequestBuilder().execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     List All Projects
     - GET /projects
     - Lists all projects you have access to.
     - Bearer Token:
       - type: http
       - name: oryAccessToken
     - returns: RequestBuilder<[ProjectMetadata]> 
     */
    open class func listProjectsWithRequestBuilder() -> RequestBuilder<[ProjectMetadata]> {
        let localVariablePath = "/projects"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<[ProjectMetadata]>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "GET", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Patch an Ory Network Project Configuration
     
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - parameter jsonPatch: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func patchProject(projectId: String, jsonPatch: [JsonPatch]? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SuccessfulProjectUpdate?, _ error: Error?) -> Void)) -> RequestTask {
        return patchProjectWithRequestBuilder(projectId: projectId, jsonPatch: jsonPatch).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Patch an Ory Network Project Configuration
     - PATCH /projects/{project_id}
     - Deprecated: Use the `patchProjectWithRevision` endpoint instead to specify the exact revision the patch was generated for.  This endpoints allows you to patch individual Ory Network project configuration keys for Ory's services (identity, permission, ...). The configuration format is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the `version` key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to the Ory Network, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.
     - Bearer Token:
       - type: http
       - name: oryAccessToken
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - parameter jsonPatch: (body)  (optional)
     - returns: RequestBuilder<SuccessfulProjectUpdate> 
     */
    open class func patchProjectWithRequestBuilder(projectId: String, jsonPatch: [JsonPatch]? = nil) -> RequestBuilder<SuccessfulProjectUpdate> {
        var localVariablePath = "/projects/{project_id}"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: jsonPatch)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SuccessfulProjectUpdate>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PATCH", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Irrecoverably purge a project
     
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func purgeProject(projectId: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return purgeProjectWithRequestBuilder(projectId: projectId).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Irrecoverably purge a project
     - DELETE /projects/{project_id}
     - !! Use with extreme caution !!  Using this API endpoint you can purge (completely delete) a project and its data. This action can not be undone and will delete ALL your data.  !! Use with extreme caution !!
     - Bearer Token:
       - type: http
       - name: oryAccessToken
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - returns: RequestBuilder<Void> 
     */
    open class func purgeProjectWithRequestBuilder(projectId: String) -> RequestBuilder<Void> {
        var localVariablePath = "/projects/{project_id}"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Remove a member associated with this project
     
     - parameter project: (path)  
     - parameter member: (path)  
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func removeProjectMember(project: String, member: String, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return removeProjectMemberWithRequestBuilder(project: project, member: member).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Remove a member associated with this project
     - DELETE /projects/{project}/members/{member}
     - This also sets their invite status to `REMOVED`. This endpoint requires the user to be a member of the project with the role `OWNER`.
     - Bearer Token:
       - type: http
       - name: oryAccessToken
     - parameter project: (path)  
     - parameter member: (path)  
     - returns: RequestBuilder<Void> 
     */
    open class func removeProjectMemberWithRequestBuilder(project: String, member: String) -> RequestBuilder<Void> {
        var localVariablePath = "/projects/{project}/members/{member}"
        let projectPreEscape = "\(APIHelper.mapValueToPathItem(project))"
        let projectPostEscape = projectPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project}", with: projectPostEscape, options: .literal, range: nil)
        let memberPreEscape = "\(APIHelper.mapValueToPathItem(member))"
        let memberPostEscape = memberPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{member}", with: memberPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters: [String: Any]? = nil

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "DELETE", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Sets the Ory Network Project active in the Ory Network Console
     
     - parameter setActiveProjectInConsoleBody: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func setActiveProjectInConsole(setActiveProjectInConsoleBody: SetActiveProjectInConsoleBody? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Void?, _ error: Error?) -> Void)) -> RequestTask {
        return setActiveProjectInConsoleWithRequestBuilder(setActiveProjectInConsoleBody: setActiveProjectInConsoleBody).execute(apiResponseQueue) { result in
            switch result {
            case .success:
                completion((), nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Sets the Ory Network Project active in the Ory Network Console
     - PUT /console/active/project
     - Use this API to set your active project in the Ory Network Console UI.
     - Bearer Token:
       - type: http
       - name: oryAccessToken
     - parameter setActiveProjectInConsoleBody: (body)  (optional)
     - returns: RequestBuilder<Void> 
     */
    open class func setActiveProjectInConsoleWithRequestBuilder(setActiveProjectInConsoleBody: SetActiveProjectInConsoleBody? = nil) -> RequestBuilder<Void> {
        let localVariablePath = "/console/active/project"
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: setActiveProjectInConsoleBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Void>.Type = OpenAPIClientAPI.requestBuilderFactory.getNonDecodableBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update an Ory Network Project Configuration
     
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - parameter setProject: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func setProject(projectId: String, setProject: SetProject? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: SuccessfulProjectUpdate?, _ error: Error?) -> Void)) -> RequestTask {
        return setProjectWithRequestBuilder(projectId: projectId, setProject: setProject).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update an Ory Network Project Configuration
     - PUT /projects/{project_id}
     - This endpoints allows you to update the Ory Network project configuration for individual services (identity, permission, ...). The configuration is fully compatible with the open source projects for the respective services (e.g. Ory Kratos for Identity, Ory Keto for Permissions).  This endpoint expects the `version` key to be set in the payload. If it is unset, it will try to import the config as if it is from the most recent version.  If you have an older version of a configuration, you should set the version key in the payload!  While this endpoint is able to process all configuration items related to features (e.g. password reset), it does not support operational configuration items (e.g. port, tracing, logging) otherwise available in the open source.  For configuration items that can not be translated to the Ory Network, this endpoint will return a list of warnings to help you understand which parts of your config could not be processed.  Be aware that updating any service's configuration will completely override your current configuration for that service!
     - Bearer Token:
       - type: http
       - name: oryAccessToken
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - parameter setProject: (body)  (optional)
     - returns: RequestBuilder<SuccessfulProjectUpdate> 
     */
    open class func setProjectWithRequestBuilder(projectId: String, setProject: SetProject? = nil) -> RequestBuilder<SuccessfulProjectUpdate> {
        var localVariablePath = "/projects/{project_id}"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: setProject)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<SuccessfulProjectUpdate>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }

    /**
     Update a B2B SSO Organization for a project.
     
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - parameter organizationId: (path) Organization ID  The Organization&#39;s ID. 
     - parameter organizationBody: (body)  (optional)
     - parameter apiResponseQueue: The queue on which api response is dispatched.
     - parameter completion: completion handler to receive the data and the error objects
     */
    @discardableResult
    open class func updateOrganization(projectId: String, organizationId: String, organizationBody: OrganizationBody? = nil, apiResponseQueue: DispatchQueue = OpenAPIClientAPI.apiResponseQueue, completion: @escaping ((_ data: Organization?, _ error: Error?) -> Void)) -> RequestTask {
        return updateOrganizationWithRequestBuilder(projectId: projectId, organizationId: organizationId, organizationBody: organizationBody).execute(apiResponseQueue) { result in
            switch result {
            case let .success(response):
                completion(response.body, nil)
            case let .failure(error):
                completion(nil, error)
            }
        }
    }

    /**
     Update a B2B SSO Organization for a project.
     - PUT /projects/{project_id}/organizations/{organization_id}
     - Bearer Token:
       - type: http
       - name: oryAccessToken
     - parameter projectId: (path) Project ID  The project&#39;s ID. 
     - parameter organizationId: (path) Organization ID  The Organization&#39;s ID. 
     - parameter organizationBody: (body)  (optional)
     - returns: RequestBuilder<Organization> 
     */
    open class func updateOrganizationWithRequestBuilder(projectId: String, organizationId: String, organizationBody: OrganizationBody? = nil) -> RequestBuilder<Organization> {
        var localVariablePath = "/projects/{project_id}/organizations/{organization_id}"
        let projectIdPreEscape = "\(APIHelper.mapValueToPathItem(projectId))"
        let projectIdPostEscape = projectIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{project_id}", with: projectIdPostEscape, options: .literal, range: nil)
        let organizationIdPreEscape = "\(APIHelper.mapValueToPathItem(organizationId))"
        let organizationIdPostEscape = organizationIdPreEscape.addingPercentEncoding(withAllowedCharacters: .urlPathAllowed) ?? ""
        localVariablePath = localVariablePath.replacingOccurrences(of: "{organization_id}", with: organizationIdPostEscape, options: .literal, range: nil)
        let localVariableURLString = OpenAPIClientAPI.basePath + localVariablePath
        let localVariableParameters = JSONEncodingHelper.encodingParameters(forEncodableObject: organizationBody)

        let localVariableUrlComponents = URLComponents(string: localVariableURLString)

        let localVariableNillableHeaders: [String: Any?] = [
            :
        ]

        let localVariableHeaderParameters = APIHelper.rejectNilHeaders(localVariableNillableHeaders)

        let localVariableRequestBuilder: RequestBuilder<Organization>.Type = OpenAPIClientAPI.requestBuilderFactory.getBuilder()

        return localVariableRequestBuilder.init(method: "PUT", URLString: (localVariableUrlComponents?.string ?? localVariableURLString), parameters: localVariableParameters, headers: localVariableHeaderParameters, requiresAuthentication: true)
    }
}
