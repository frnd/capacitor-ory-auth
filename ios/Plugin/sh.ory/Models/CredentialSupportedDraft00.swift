//
// CredentialSupportedDraft00.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

/** Includes information about the supported verifiable credentials. */
public struct CredentialSupportedDraft00: Codable, JSONEncodable, Hashable {

    /** OpenID Connect Verifiable Credentials Cryptographic Binding Methods Supported  Contains a list of cryptographic binding methods supported for signing the proof. */
    public var cryptographicBindingMethodsSupported: [String]?
    /** OpenID Connect Verifiable Credentials Cryptographic Suites Supported  Contains a list of cryptographic suites methods supported for signing the proof. */
    public var cryptographicSuitesSupported: [String]?
    /** OpenID Connect Verifiable Credentials Format  Contains the format that is supported by this authorization server. */
    public var format: String?
    /** OpenID Connect Verifiable Credentials Types  Contains the types of verifiable credentials supported. */
    public var types: [String]?

    public init(cryptographicBindingMethodsSupported: [String]? = nil, cryptographicSuitesSupported: [String]? = nil, format: String? = nil, types: [String]? = nil) {
        self.cryptographicBindingMethodsSupported = cryptographicBindingMethodsSupported
        self.cryptographicSuitesSupported = cryptographicSuitesSupported
        self.format = format
        self.types = types
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case cryptographicBindingMethodsSupported = "cryptographic_binding_methods_supported"
        case cryptographicSuitesSupported = "cryptographic_suites_supported"
        case format
        case types
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(cryptographicBindingMethodsSupported, forKey: .cryptographicBindingMethodsSupported)
        try container.encodeIfPresent(cryptographicSuitesSupported, forKey: .cryptographicSuitesSupported)
        try container.encodeIfPresent(format, forKey: .format)
        try container.encodeIfPresent(types, forKey: .types)
    }
}

