//
// NormalizedProjectRevisionTokenizerTemplate.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct NormalizedProjectRevisionTokenizerTemplate: Codable, JSONEncodable, Hashable {

    static let ttlRule = StringRule(minLength: nil, maxLength: nil, pattern: "/^[0-9]+(ns|us|ms|s|m|h)$/")
    /** Claims mapper URL */
    public var claimsMapperUrl: String?
    /** The Project's Revision Creation Date */
    public var createdAt: Date?
    /** The revision ID. */
    public var id: String?
    /** JSON Web Key URL */
    public var jwksUrl: String?
    /** The unique key of the template */
    public var key: String?
    /** The Revision's ID this schema belongs to */
    public var projectRevisionId: String?
    /** Token time to live */
    public var ttl: String? = "1m"
    /** Last Time Project's Revision was Updated */
    public var updatedAt: Date?

    public init(claimsMapperUrl: String? = nil, createdAt: Date? = nil, id: String? = nil, jwksUrl: String? = nil, key: String? = nil, projectRevisionId: String? = nil, ttl: String? = "1m", updatedAt: Date? = nil) {
        self.claimsMapperUrl = claimsMapperUrl
        self.createdAt = createdAt
        self.id = id
        self.jwksUrl = jwksUrl
        self.key = key
        self.projectRevisionId = projectRevisionId
        self.ttl = ttl
        self.updatedAt = updatedAt
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case claimsMapperUrl = "claims_mapper_url"
        case createdAt = "created_at"
        case id
        case jwksUrl = "jwks_url"
        case key
        case projectRevisionId = "project_revision_id"
        case ttl
        case updatedAt = "updated_at"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(claimsMapperUrl, forKey: .claimsMapperUrl)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encodeIfPresent(id, forKey: .id)
        try container.encodeIfPresent(jwksUrl, forKey: .jwksUrl)
        try container.encodeIfPresent(key, forKey: .key)
        try container.encodeIfPresent(projectRevisionId, forKey: .projectRevisionId)
        try container.encodeIfPresent(ttl, forKey: .ttl)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
    }
}

