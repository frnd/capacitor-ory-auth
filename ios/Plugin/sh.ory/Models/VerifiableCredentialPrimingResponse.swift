//
// VerifiableCredentialPrimingResponse.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct VerifiableCredentialPrimingResponse: Codable, JSONEncodable, Hashable {

    public var cNonce: String?
    public var cNonceExpiresIn: Int64?
    public var error: String?
    public var errorDebug: String?
    public var errorDescription: String?
    public var errorHint: String?
    public var format: String?
    public var statusCode: Int64?

    public init(cNonce: String? = nil, cNonceExpiresIn: Int64? = nil, error: String? = nil, errorDebug: String? = nil, errorDescription: String? = nil, errorHint: String? = nil, format: String? = nil, statusCode: Int64? = nil) {
        self.cNonce = cNonce
        self.cNonceExpiresIn = cNonceExpiresIn
        self.error = error
        self.errorDebug = errorDebug
        self.errorDescription = errorDescription
        self.errorHint = errorHint
        self.format = format
        self.statusCode = statusCode
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case cNonce = "c_nonce"
        case cNonceExpiresIn = "c_nonce_expires_in"
        case error
        case errorDebug = "error_debug"
        case errorDescription = "error_description"
        case errorHint = "error_hint"
        case format
        case statusCode = "status_code"
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(cNonce, forKey: .cNonce)
        try container.encodeIfPresent(cNonceExpiresIn, forKey: .cNonceExpiresIn)
        try container.encodeIfPresent(error, forKey: .error)
        try container.encodeIfPresent(errorDebug, forKey: .errorDebug)
        try container.encodeIfPresent(errorDescription, forKey: .errorDescription)
        try container.encodeIfPresent(errorHint, forKey: .errorHint)
        try container.encodeIfPresent(format, forKey: .format)
        try container.encodeIfPresent(statusCode, forKey: .statusCode)
    }
}

