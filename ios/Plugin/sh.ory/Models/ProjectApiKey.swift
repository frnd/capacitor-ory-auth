//
// ProjectApiKey.swift
//
// Generated by openapi-generator
// https://openapi-generator.tech
//

import Foundation
#if canImport(AnyCodable)
import AnyCodable
#endif

public struct ProjectApiKey: Codable, JSONEncodable, Hashable {

    /** The token's creation date */
    public var createdAt: Date?
    /** The token's ID. */
    public var id: String
    /** The Token's Name  Set this to help you remember, for example, where you use the token. */
    public var name: String
    /** The token's owner */
    public var ownerId: String
    /** The Token's Project ID */
    public var projectId: String?
    /** The token's last update date */
    public var updatedAt: Date?
    /** The token's value */
    public var value: String?

    public init(createdAt: Date? = nil, id: String, name: String, ownerId: String, projectId: String? = nil, updatedAt: Date? = nil, value: String? = nil) {
        self.createdAt = createdAt
        self.id = id
        self.name = name
        self.ownerId = ownerId
        self.projectId = projectId
        self.updatedAt = updatedAt
        self.value = value
    }

    public enum CodingKeys: String, CodingKey, CaseIterable {
        case createdAt = "created_at"
        case id
        case name
        case ownerId = "owner_id"
        case projectId = "project_id"
        case updatedAt = "updated_at"
        case value
    }

    // Encodable protocol methods

    public func encode(to encoder: Encoder) throws {
        var container = encoder.container(keyedBy: CodingKeys.self)
        try container.encodeIfPresent(createdAt, forKey: .createdAt)
        try container.encode(id, forKey: .id)
        try container.encode(name, forKey: .name)
        try container.encode(ownerId, forKey: .ownerId)
        try container.encodeIfPresent(projectId, forKey: .projectId)
        try container.encodeIfPresent(updatedAt, forKey: .updatedAt)
        try container.encodeIfPresent(value, forKey: .value)
    }
}

